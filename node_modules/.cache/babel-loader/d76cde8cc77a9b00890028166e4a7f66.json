{"ast":null,"code":"var _jsxFileName = \"/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-trivia-react-redux/src/pages/Game.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport getTriviaApi from '../services/triviaAPI';\nimport Questions from '../components/Questions';\nimport { scoreAction } from '../redux/actions';\n\nclass Game extends Component {\n  constructor() {\n    super();\n\n    this.questionsExecute = async () => {\n      const {\n        history\n      } = this.props;\n      const result = await getTriviaApi(localStorage.getItem('token'));\n      const error = 3;\n      if (result.response_code === error) history.push('/');else this.setState({\n        questions: result.results\n      });\n    };\n\n    this.handleScore = (difficulty, _ref) => {\n      let {\n        target\n      } = _ref;\n      const {\n        scoreDispatch\n      } = this.props;\n      const timer = Number(document.getElementById('timer').innerHTML);\n      const summary = {\n        hard: 3,\n        medium: 2,\n        easy: 1\n      };\n      const CONSTANT = 10;\n      const equation = CONSTANT + timer * summary[difficulty];\n\n      if (target.className === 'correct') {\n        scoreDispatch(equation);\n      }\n\n      this.setState({\n        next: true\n      });\n    };\n\n    this.state = {\n      questions: [],\n      index: 0,\n      next: ''\n    };\n  }\n\n  componentDidMount() {\n    this.questionsExecute();\n  }\n\n  render() {\n    const {\n      questions,\n      index,\n      next\n    } = this.state;\n    const {\n      gravatarEmail,\n      name,\n      score\n    } = this.props;\n    const hash = md5(gravatarEmail).toString();\n    return /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: `https://www.gravatar.com/avatar/${hash}`,\n      \"data-testid\": \"header-profile-picture\",\n      alt: \"avatar do usu\\xE1rio\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      \"data-testid\": \"header-player-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }, name), /*#__PURE__*/React.createElement(\"span\", {\n      \"data-testid\": \"header-score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, score)), questions.length !== 0 ? /*#__PURE__*/React.createElement(Questions, {\n      question: questions[index],\n      handleScore: this.handleScore,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 27\n      }\n    }) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, \"Carregando\"), next && /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, \"Next\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  gravatarEmail: state.player.gravatarEmail,\n  name: state.player.name,\n  score: state.player.score\n});\n\nconst mapDispatchToProps = dispatch => ({\n  scoreDispatch: payload => dispatch(scoreAction(payload))\n});\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }).isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  scoreDispatch: PropTypes.func.isRequired,\n  score: PropTypes.number.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-trivia-react-redux/src/pages/Game.js"],"names":["React","Component","PropTypes","connect","md5","getTriviaApi","Questions","scoreAction","Game","constructor","questionsExecute","history","props","result","localStorage","getItem","error","response_code","push","setState","questions","results","handleScore","difficulty","target","scoreDispatch","timer","Number","document","getElementById","innerHTML","summary","hard","medium","easy","CONSTANT","equation","className","next","state","index","componentDidMount","render","gravatarEmail","name","score","hash","toString","length","mapStateToProps","player","mapDispatchToProps","dispatch","payload","propTypes","shape","func","isRequired","string","number"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport getTriviaApi from '../services/triviaAPI';\nimport Questions from '../components/Questions';\nimport { scoreAction } from '../redux/actions';\n\nclass Game extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      questions: [],\n      index: 0,\n      next: '',\n    };\n  }\n\n  componentDidMount() {\n    this.questionsExecute();\n  }\n\n  questionsExecute = async () => {\n    const { history } = this.props;\n    const result = await getTriviaApi(localStorage.getItem('token'));\n    const error = 3;\n    if (result.response_code === error) history.push('/');\n    else this.setState({ questions: result.results });\n  }\n\n  handleScore = (difficulty, { target }) => {\n    const { scoreDispatch } = this.props;\n    const timer = Number(document.getElementById('timer').innerHTML);\n    const summary = {\n      hard: 3,\n      medium: 2,\n      easy: 1,\n    };\n    const CONSTANT = 10;\n    const equation = CONSTANT + (timer * summary[difficulty]);\n    if (target.className === 'correct') {\n      scoreDispatch(equation);\n    }\n    this.setState({\n      next: true,\n    });\n  }\n\n  render() {\n    const { questions, index, next } = this.state;\n    const { gravatarEmail, name, score } = this.props;\n    const hash = md5(gravatarEmail).toString();\n    return (\n      <section>\n        <header>\n          <img\n            src={ `https://www.gravatar.com/avatar/${hash}` }\n            data-testid=\"header-profile-picture\"\n            alt=\"avatar do usuÃ¡rio\"\n          />\n          <span\n            data-testid=\"header-player-name\"\n          >\n            { name }\n          </span>\n          <span\n            data-testid=\"header-score\"\n          >\n            { score }\n          </span>\n        </header>\n        {questions\n          .length !== 0 ? <Questions\n            question={ questions[index] }\n            handleScore={ this.handleScore }\n          />\n          : <p>Carregando</p>}\n        {\n          (next) && (\n            <button\n              type=\"button\"\n              data-testid=\"btn-next\"\n            >\n              Next\n            </button>\n          )\n        }\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  gravatarEmail: state.player.gravatarEmail,\n  name: state.player.name,\n  score: state.player.score,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  scoreDispatch: (payload) => dispatch(scoreAction(payload)),\n});\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  scoreDispatch: PropTypes.func.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}