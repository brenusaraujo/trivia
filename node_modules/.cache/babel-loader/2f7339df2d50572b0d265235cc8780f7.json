{"ast":null,"code":"var _jsxFileName = \"/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-trivia-react-redux/src/pages/Game.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport getTriviaApi from '../services/triviaAPI';\nimport Questions from '../components/Questions';\n\nclass Game extends Component {\n  constructor() {\n    super();\n\n    this.questionsExecute = async () => {\n      const {\n        history\n      } = this.props;\n      const result = await getTriviaApi(localStorage.getItem('token'));\n      const error = 3;\n      if (result.response_code === error) history.push('/');else this.setState({\n        questions: result.results\n      });\n    };\n\n    this.state = {\n      questions: [],\n      index: 0\n    };\n  }\n\n  componentDidMount() {\n    this.questionsExecute();\n  }\n\n  render() {\n    const {\n      questions,\n      index\n    } = this.state;\n    const {\n      gravatarEmail,\n      name\n    } = this.props;\n    const hash = md5(gravatarEmail).toString();\n    return /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: `https://www.gravatar.com/avatar/${hash}`,\n      \"data-testid\": \"header-profile-picture\",\n      alt: \"avatar do usu\\xE1rio\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      \"data-testid\": \"header-player-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }\n    }, name), /*#__PURE__*/React.createElement(\"span\", {\n      \"data-testid\": \"header-score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }, 0)), questions.length !== 0 ? /*#__PURE__*/React.createElement(Questions, {\n      question: questions[index],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 27\n      }\n    }) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 73\n      }\n    }, \"Carregando\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  gravatarEmail: state.player.gravatarEmail,\n  name: state.player.name\n});\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }).isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired\n};\nexport default connect(mapStateToProps)(Game);","map":{"version":3,"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-trivia-react-redux/src/pages/Game.js"],"names":["React","Component","PropTypes","connect","md5","getTriviaApi","Questions","Game","constructor","questionsExecute","history","props","result","localStorage","getItem","error","response_code","push","setState","questions","results","state","index","componentDidMount","render","gravatarEmail","name","hash","toString","length","mapStateToProps","player","propTypes","shape","func","isRequired","string"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,GAAP,MAAgB,eAAhB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;AAEA,MAAMC,IAAN,SAAmBN,SAAnB,CAA6B;AAC3BO,EAAAA,WAAW,GAAG;AACZ;;AADY,SAadC,gBAbc,GAaK,YAAY;AAC7B,YAAM;AAAEC,QAAAA;AAAF,UAAc,KAAKC,KAAzB;AACA,YAAMC,MAAM,GAAG,MAAMP,YAAY,CAACQ,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAjC;AACA,YAAMC,KAAK,GAAG,CAAd;AACA,UAAIH,MAAM,CAACI,aAAP,KAAyBD,KAA7B,EAAoCL,OAAO,CAACO,IAAR,CAAa,GAAb,EAApC,KACK,KAAKC,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAEP,MAAM,CAACQ;AAApB,OAAd;AACN,KAnBa;;AAGZ,SAAKC,KAAL,GAAa;AACXF,MAAAA,SAAS,EAAE,EADA;AAEXG,MAAAA,KAAK,EAAE;AAFI,KAAb;AAID;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKd,gBAAL;AACD;;AAUDe,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEL,MAAAA,SAAF;AAAaG,MAAAA;AAAb,QAAuB,KAAKD,KAAlC;AACA,UAAM;AAAEI,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,QAA0B,KAAKf,KAArC;AACA,UAAMgB,IAAI,GAAGvB,GAAG,CAACqB,aAAD,CAAH,CAAmBG,QAAnB,EAAb;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,GAAG,EAAI,mCAAkCD,IAAK,EADhD;AAEE,qBAAY,wBAFd;AAGE,MAAA,GAAG,EAAC,sBAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAME;AACE,qBAAY,oBADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGID,IAHJ,CANF,eAWE;AACE,qBAAY,cADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGI,CAHJ,CAXF,CADF,EAkBGP,SAAS,CACPU,MADF,KACa,CADb,gBACiB,oBAAC,SAAD;AAAW,MAAA,QAAQ,EAAGV,SAAS,CAACG,KAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADjB,gBAC+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAnBlE,CADF;AAuBD;;AAjD0B;;AAoD7B,MAAMQ,eAAe,GAAIT,KAAD,KAAY;AAClCI,EAAAA,aAAa,EAAEJ,KAAK,CAACU,MAAN,CAAaN,aADM;AAElCC,EAAAA,IAAI,EAAEL,KAAK,CAACU,MAAN,CAAaL;AAFe,CAAZ,CAAxB;;AAKAnB,IAAI,CAACyB,SAAL,GAAiB;AACftB,EAAAA,OAAO,EAAER,SAAS,CAAC+B,KAAV,CAAgB;AACvBhB,IAAAA,IAAI,EAAEf,SAAS,CAACgC;AADO,GAAhB,EAENC,UAHY;AAIfV,EAAAA,aAAa,EAAEvB,SAAS,CAACkC,MAAV,CAAiBD,UAJjB;AAKfT,EAAAA,IAAI,EAAExB,SAAS,CAACkC,MAAV,CAAiBD;AALR,CAAjB;AAQA,eAAehC,OAAO,CAAC2B,eAAD,CAAP,CAAyBvB,IAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport getTriviaApi from '../services/triviaAPI';\nimport Questions from '../components/Questions';\n\nclass Game extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      questions: [],\n      index: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.questionsExecute();\n  }\n\n  questionsExecute = async () => {\n    const { history } = this.props;\n    const result = await getTriviaApi(localStorage.getItem('token'));\n    const error = 3;\n    if (result.response_code === error) history.push('/');\n    else this.setState({ questions: result.results });\n  }\n\n  render() {\n    const { questions, index } = this.state;\n    const { gravatarEmail, name } = this.props;\n    const hash = md5(gravatarEmail).toString();\n    return (\n      <section>\n        <header>\n          <img\n            src={ `https://www.gravatar.com/avatar/${hash}` }\n            data-testid=\"header-profile-picture\"\n            alt=\"avatar do usuÃ¡rio\"\n          />\n          <span\n            data-testid=\"header-player-name\"\n          >\n            { name }\n          </span>\n          <span\n            data-testid=\"header-score\"\n          >\n            { 0 }\n          </span>\n        </header>\n        {questions\n          .length !== 0 ? <Questions question={ questions[index] } /> : <p>Carregando</p>}\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  gravatarEmail: state.player.gravatarEmail,\n  name: state.player.name,\n});\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}