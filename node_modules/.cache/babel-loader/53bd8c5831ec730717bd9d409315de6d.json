{"ast":null,"code":"var _jsxFileName = \"/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-trivia-react-redux/src/pages/Game.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport getTriviaApi from '../services/triviaAPI';\nimport Questions from '../components/Questions';\nimport Header from '../components/Header';\nimport { assertionAction, scoreAction } from '../redux/actions';\n\nclass Game extends Component {\n  constructor() {\n    super();\n\n    this.questionsExecute = async () => {\n      const {\n        history\n      } = this.props;\n      const result = await getTriviaApi(localStorage.getItem('token'));\n      const error = 3;\n      if (result.response_code === error) history.push('/');else this.setState({\n        questions: result.results\n      });\n    };\n\n    this.handleScore = (difficulty, _ref) => {\n      let {\n        target\n      } = _ref;\n      const {\n        scoreDispatch\n      } = this.props;\n      const {\n        assertions\n      } = this.state;\n      const timer = Number(document.getElementById('timer').innerHTML);\n      const summary = {\n        hard: 3,\n        medium: 2,\n        easy: 1\n      };\n      const CONSTANT = 10;\n      const equation = CONSTANT + timer * summary[difficulty];\n\n      if (target.className === 'correct') {\n        scoreDispatch(equation);\n        this.setState({\n          assertions: assertions + 1\n        });\n        assertionDispatch(assertions);\n      }\n    };\n\n    this.state = {\n      questions: [],\n      index: 0,\n      assertions: 0\n    };\n  }\n\n  componentDidMount() {\n    this.questionsExecute();\n  }\n\n  render() {\n    const {\n      questions,\n      index\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }), questions.length !== 0 ? /*#__PURE__*/React.createElement(Questions, {\n      question: questions[index],\n      handleScore: this.handleScore,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 27\n      }\n    }) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, \"Carregando\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  gravatarEmail: state.player.gravatarEmail,\n  name: state.player.name,\n  score: state.player.score\n});\n\nconst mapDispatchToProps = dispatch => ({\n  scoreDispatch: payload => dispatch(scoreAction(payload)),\n  assertionDispatch: payload => dispatch(assertionAction(payload))\n});\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }).isRequired,\n  scoreDispatch: PropTypes.func.isRequired,\n  assertionDispatch: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-trivia-react-redux/src/pages/Game.js"],"names":["React","Component","PropTypes","connect","getTriviaApi","Questions","Header","assertionAction","scoreAction","Game","constructor","questionsExecute","history","props","result","localStorage","getItem","error","response_code","push","setState","questions","results","handleScore","difficulty","target","scoreDispatch","assertions","state","timer","Number","document","getElementById","innerHTML","summary","hard","medium","easy","CONSTANT","equation","className","assertionDispatch","index","componentDidMount","render","length","mapStateToProps","gravatarEmail","player","name","score","mapDispatchToProps","dispatch","payload","propTypes","shape","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport getTriviaApi from '../services/triviaAPI';\nimport Questions from '../components/Questions';\nimport Header from '../components/Header';\nimport { assertionAction, scoreAction } from '../redux/actions';\n\nclass Game extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      questions: [],\n      index: 0,\n      assertions: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.questionsExecute();\n  }\n\n  questionsExecute = async () => {\n    const { history } = this.props;\n    const result = await getTriviaApi(localStorage.getItem('token'));\n    const error = 3;\n    if (result.response_code === error) history.push('/');\n    else this.setState({ questions: result.results });\n  }\n\n  handleScore = (difficulty, { target }) => {\n    const { scoreDispatch } = this.props;\n    const { assertions } = this.state;\n    const timer = Number(document.getElementById('timer').innerHTML);\n    const summary = {\n      hard: 3,\n      medium: 2,\n      easy: 1,\n    };\n    const CONSTANT = 10;\n    const equation = CONSTANT + (timer * summary[difficulty]);\n    if (target.className === 'correct') {\n      scoreDispatch(equation);\n      this.setState({\n        assertions: assertions + 1,\n      });\n      assertionDispatch(assertions);\n    }\n  }\n\n  render() {\n    const { questions, index } = this.state;\n\n    return (\n      <section>\n        <Header />\n        {questions\n          .length !== 0 ? <Questions\n            question={ questions[index] }\n            handleScore={ this.handleScore }\n          />\n          : <p>Carregando</p>}\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  gravatarEmail: state.player.gravatarEmail,\n  name: state.player.name,\n  score: state.player.score,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  scoreDispatch: (payload) => dispatch(scoreAction(payload)),\n  assertionDispatch: (payload) => dispatch(assertionAction(payload)),\n});\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  scoreDispatch: PropTypes.func.isRequired,\n  assertionDispatch: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}