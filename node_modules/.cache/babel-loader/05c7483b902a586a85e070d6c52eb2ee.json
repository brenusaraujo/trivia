{"ast":null,"code":"var _jsxFileName = \"/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-trivia-react-redux/src/components/Questions.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { scoreAction, assertionAction } from '../redux/actions';\n\nclass Questions extends Component {\n  constructor() {\n    super();\n\n    this.timer = () => {\n      const oneSec = 1000;\n      setInterval(() => this.setState(prevState => ({\n        timer: prevState.timer - 1\n      }), this.clearTimer), oneSec);\n    };\n\n    this.clearTimer = () => {\n      const {\n        timer\n      } = this.state;\n\n      if (timer === 0) {\n        this.setState({\n          disabled: true\n        });\n      }\n    };\n\n    this.randomAswers = () => {\n      const {\n        question\n      } = this.props;\n      const half = 0.5;\n      const answers = [question.correct_answer, ...question.incorrect_answers].sort(() => Math.random() - half);\n      this.setState({\n        answers\n      });\n    };\n\n    this.handleScore = (difficulty, _ref) => {\n      let {\n        target\n      } = _ref;\n      const {\n        scoreDispatch,\n        assertionDispatch\n      } = this.props;\n      const timer = Number(document.getElementById('timer').innerHTML);\n      const summary = {\n        hard: 3,\n        medium: 2,\n        easy: 1\n      };\n      const CONSTANT = 10;\n      const equation = CONSTANT + timer * summary[difficulty];\n\n      if (target.className === 'correct') {\n        scoreDispatch(equation);\n        assertionDispatch();\n      }\n\n      this.setState({\n        next: true\n      });\n    };\n\n    this.handleAnswers = () => {\n      this.randomAswers();\n      this.setState({\n        next: false,\n        timer: 30\n      });\n    };\n\n    this.state = {\n      timer: 30,\n      disabled: false,\n      answers: [],\n      next: false\n    };\n  }\n\n  componentDidMount() {\n    this.timer();\n    this.randomAswers();\n  }\n\n  render() {\n    const {\n      question,\n      handleNext\n    } = this.props;\n    const {\n      timer,\n      disabled,\n      answers,\n      next\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      id: \"timer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, timer), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, question.category), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, question.question), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, question.correct_answer), /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"answer-options\",\n      className: \"btn-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, answers.map((a, i) => {\n      let datatestid = '';\n\n      if (a === question.correct_answer) {\n        datatestid = 'correct-answer';\n      } else {\n        datatestid = `wrong-answer-${i}`;\n      }\n\n      const handleClick = () => answers.forEach((element, idx) => {\n        const button = document.getElementById(idx);\n\n        if (element === question.correct_answer) {\n          button.className = 'correct';\n        } else {\n          button.className = 'incorrect';\n        }\n      });\n\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: a,\n        id: i,\n        type: \"button\",\n        className: \"btn btn-light\",\n        \"data-testid\": datatestid,\n        disabled: disabled,\n        onClick: event => {\n          handleClick();\n          this.handleScore(question.difficulty, event);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }\n      }, a);\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }), next && /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      onClick: async () => {\n        await handleNext();\n        this.handleAnswers();\n      },\n      className: \"btn btn-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, \"Next\"));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  scoreDispatch: payload => dispatch(scoreAction(payload)),\n  assertionDispatch: payload => dispatch(assertionAction(payload))\n});\n\nQuestions.propTypes = {\n  question: PropTypes.shape({\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string),\n    category: PropTypes.string,\n    question: PropTypes.string,\n    difficulty: PropTypes.string\n  }).isRequired,\n  scoreDispatch: PropTypes.func.isRequired,\n  assertionDispatch: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired\n};\nexport default connect(null, mapDispatchToProps)(Questions);","map":{"version":3,"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-trivia-react-redux/src/components/Questions.js"],"names":["React","Component","PropTypes","connect","scoreAction","assertionAction","Questions","constructor","timer","oneSec","setInterval","setState","prevState","clearTimer","state","disabled","randomAswers","question","props","half","answers","correct_answer","incorrect_answers","sort","Math","random","handleScore","difficulty","target","scoreDispatch","assertionDispatch","Number","document","getElementById","innerHTML","summary","hard","medium","easy","CONSTANT","equation","className","next","handleAnswers","componentDidMount","render","handleNext","category","map","a","i","datatestid","handleClick","forEach","element","idx","button","event","mapDispatchToProps","dispatch","payload","propTypes","shape","string","arrayOf","isRequired","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { scoreAction, assertionAction } from '../redux/actions';\n\nclass Questions extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      timer: 30,\n      disabled: false,\n      answers: [],\n      next: false,\n    };\n  }\n\n  componentDidMount() {\n    this.timer();\n    this.randomAswers();\n  }\n\n  timer = () => {\n    const oneSec = 1000;\n    setInterval(() => this.setState((prevState) => ({\n      timer: prevState.timer - 1,\n    }), this.clearTimer), oneSec);\n  }\n\n  clearTimer = () => {\n    const { timer } = this.state;\n    if (timer === 0) {\n      this.setState({ disabled: true });\n    }\n  }\n\n  randomAswers = () => {\n    const { question } = this.props;\n    const half = 0.5;\n    const answers = [question.correct_answer, ...question.incorrect_answers]\n      .sort(() => Math.random() - half);\n    this.setState({ answers });\n  }\n\n  handleScore = (difficulty, { target }) => {\n    const { scoreDispatch, assertionDispatch } = this.props;\n    const timer = Number(document.getElementById('timer').innerHTML);\n    const summary = {\n      hard: 3,\n      medium: 2,\n      easy: 1,\n    };\n    const CONSTANT = 10;\n    const equation = CONSTANT + (timer * summary[difficulty]);\n    if (target.className === 'correct') {\n      scoreDispatch(equation);\n      assertionDispatch();\n    }\n    this.setState({\n      next: true,\n    });\n  }\n\n  handleAnswers = () => {\n    this.randomAswers();\n    this.setState({\n      next: false,\n      timer: 30,\n    });\n  }\n\n  render() {\n    const { question, handleNext } = this.props;\n    const { timer, disabled, answers, next } = this.state;\n    return (\n      <div>\n        <h2\n          id=\"timer\"\n        >\n          {timer}\n        </h2>\n        <p data-testid=\"question-category\">{question.category}</p>\n        <p data-testid=\"question-text\">{question.question}</p>\n        <p>{question.correct_answer}</p>\n        <div data-testid=\"answer-options\" className=\"btn-group\">\n          {answers.map((a, i) => {\n            let datatestid = '';\n            if (a === question.correct_answer) {\n              datatestid = 'correct-answer';\n            } else {\n              datatestid = `wrong-answer-${i}`;\n            }\n            const handleClick = () => (\n              answers.forEach((element, idx) => {\n                const button = document.getElementById(idx);\n                if (element === question.correct_answer) {\n                  button.className = 'correct';\n                } else {\n                  button.className = 'incorrect';\n                }\n              }));\n            return (\n              <button\n                key={ a }\n                id={ i }\n                type=\"button\"\n                className=\"btn btn-light\"\n                data-testid={ datatestid }\n                disabled={ disabled }\n                onClick={ (event) => {\n                  handleClick();\n                  this.handleScore(question.difficulty, event);\n                } }\n              >\n                {a}\n              </button>\n            );\n          })}\n        </div>\n        <br />\n        <br />\n        {\n          (next) && (\n            <button\n              type=\"button\"\n              data-testid=\"btn-next\"\n              onClick={ async () => {\n                await handleNext();\n                this.handleAnswers();\n              } }\n              className=\"btn btn-light\"\n            >\n              Next\n            </button>\n          )\n        }\n      </div>\n\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  scoreDispatch: (payload) => dispatch(scoreAction(payload)),\n  assertionDispatch: (payload) => dispatch(assertionAction(payload)),\n});\n\nQuestions.propTypes = {\n  question: PropTypes.shape({\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string),\n    category: PropTypes.string,\n    question: PropTypes.string,\n    difficulty: PropTypes.string,\n  }).isRequired,\n  scoreDispatch: PropTypes.func.isRequired,\n  assertionDispatch: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Questions);\n"]},"metadata":{},"sourceType":"module"}